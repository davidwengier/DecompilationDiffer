@page "/{*fragment}"
@inject NavigationManager navigationManager
@using System.Threading

<div class="banner">
    <span class="title">Decompilation Differ<span class="version"> - @ThisAssembly.AssemblyInformationalVersion</span></span>
    <span class="about">
        by <a target="_blank" href="https://twitter.com/davidwengier">@@davidwengier</a>
        - <a target="_blank" href="https://github.com/davidwengier/DecompilationDiffer">GitHub</a>
    </span>
</div>

<div class="parent">
    <div class="code-header"><span class="header">Base</span></div>
    <div class="code"><MonacoEditor @ref="codeEditor" Id="code-editor" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="v1-header"><span class="header">Version 1</span></div>
    <div class="v1"><MonacoEditor @ref="v1" Id="v1" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="v2-header"><span class="header">Version 2</span></div>
    <div class="v2"><MonacoEditor @ref="v2" Id="v2" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="diff-header">
        <span class="header">Decompilation Diff from Base</span>
        <div class="refresh">
            <span>
                <input type="checkbox" @bind="_autoRefresh" /> Auto
            </span>
            <div class="btn btn-primary" @onclick="Refresh">
                <span>Refresh</span>
            </div>
        </div>
    </div>
    <div class="v1Diff"><MonacoDiffEditor @ref="v1Diff" Id="v1diff" ConstructionOptions="DiffEditorConstructionOptions" OnDidScrollChangeModified="ScrollV1" /></div>
    <div class="v2Diff"><MonacoDiffEditor @ref="v2Diff" Id="v2diff" ConstructionOptions="DiffEditorConstructionOptions" OnDidScrollChangeModified="ScrollV2" /></div>
</div>

@code {
    private MonacoEditor codeEditor;
    private MonacoEditor v1;
    private MonacoEditor v2;
    private MonacoDiffEditor v1Diff;
    private MonacoDiffEditor v2Diff;
    private bool _autoRefresh = true;
    private bool _syncScroll = true;
    private string _initialBaseCode = "record R(int X);";
    private string _initialVersion1Code = "record R(int X)\n{\n    public int X { get; init; }\n}";
    private string _initialVersion2Code = "record R(int X)\n{\n    public int X { get; set; } = X;\n}";

    [ParameterAttribute]
    public string fragment { get; set; }

    private DiffEditorConstructionOptions DiffEditorConstructionOptions(MonacoDiffEditor editor)
    {
        var options = new DiffEditorConstructionOptions
        {
            AutomaticLayout = true,
            Minimap = new EditorMinimapOptions() { Enabled = false },
            Folding = false,
            RenderSideBySide = false,
            IgnoreTrimWhitespace = true,
            OriginalEditable = false,
            ReadOnly = true,
            LineNumbers = "",
            Scrollbar = new EditorScrollbarOptions() { Vertical = "hidden", VerticalScrollbarSize = 0 }
        };

        return options;
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Minimap = new EditorMinimapOptions() { Enabled = false },
            Folding = false,
        };

        if (editor == codeEditor)
        {
            var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
            var slug = uri.Fragment.TrimStart('#');
            if (!string.IsNullOrWhiteSpace(slug))
            {
                var uncompressed = Runner.Uncompress(slug);
                _initialVersion1Code = "Error reading URL:\n\n" + uncompressed;
                var bits = uncompressed.Split((char)7);
                if (bits.Length == 3)
                {
                    _initialBaseCode = bits[0];
                    _initialVersion1Code = bits[1];
                    _initialVersion2Code = bits[2];
                }
            }

            options.Value = _initialBaseCode;
        }
        else if (editor == v1)
        {
            options.Value = _initialVersion1Code;
        }
        else if (editor == v2)
        {
            options.Value = _initialVersion2Code;

            _ = Update(default);
        }

        return options;
    }

    private CancellationTokenSource _typingCancellationSource = new CancellationTokenSource();

    private void Refresh()
    {
        _ = Update(default);
    }

    private void OnKeyUp(KeyboardEvent keyboardEvent)
    {
        // ignore arrow keys
        if (keyboardEvent.KeyCode == KeyCode.LeftArrow ||
            keyboardEvent.KeyCode == KeyCode.RightArrow ||
            keyboardEvent.KeyCode == KeyCode.UpArrow ||
            keyboardEvent.KeyCode == KeyCode.DownArrow ||
            keyboardEvent.KeyCode == KeyCode.PageUp ||
            keyboardEvent.KeyCode == KeyCode.PageDown)
        {
            return;
        }

        if (!_autoRefresh)
        {
            return;
        }

        _typingCancellationSource.Cancel();
        _typingCancellationSource = new CancellationTokenSource();
        _ = Update(_typingCancellationSource.Token);
    }

    private async Task Update(CancellationToken cancellationToken)
    {
        await Task.Delay(500, cancellationToken);

        if (cancellationToken.IsCancellationRequested)
        {
            return;
        }

        var tempModel = await MonacoEditorBase.CreateModel("Compiling and Decompiling...", "txt");

        await v1Diff.SetModel(new DiffEditorModel
        {
            Original = tempModel,
            Modified = tempModel
        });

        var runner = new Runner(await codeEditor.GetValue(), await v1.GetValue(), await v2.GetValue());

        await runner.Run(navigationManager.BaseUri);

        navigationManager.NavigateTo(navigationManager.BaseUri + "#" + runner.Slug, forceLoad: false);

        var baseOutput = runner.BaseOutput;
        var version1Output = runner.Version1Output;
        var version2Output = runner.Version2Output;

        if (baseOutput.StartsWith("Error"))
        {
            var originalModel = await MonacoEditorBase.CreateModel(baseOutput, "txt");
            var modifiedModel = await MonacoEditorBase.CreateModel(baseOutput, "txt");

            await v1Diff.SetModel(new DiffEditorModel
            {
                Original = originalModel,
                Modified = modifiedModel
            });
            originalModel = await MonacoEditorBase.CreateModel("", "txt");
            modifiedModel = await MonacoEditorBase.CreateModel("", "txt");

            await v2Diff.SetModel(new DiffEditorModel
            {
                Original = originalModel,
                Modified = modifiedModel
            });
        }
        else
        {
            var lang = version1Output.StartsWith("Error") ? "txt" : "csharp";
            var originalModel = await MonacoEditorBase.CreateModel(version1Output.StartsWith("Error") ? version1Output : baseOutput, lang);
            var modifiedModel = await MonacoEditorBase.CreateModel(version1Output, lang);

            await v1Diff.SetModel(new DiffEditorModel
            {
                Original = originalModel,
                Modified = modifiedModel
            });

            lang = version2Output.StartsWith("Error") ? "txt" : "csharp";
            originalModel = await MonacoEditorBase.CreateModel(version2Output.StartsWith("Error") ? version2Output : baseOutput, lang);
            modifiedModel = await MonacoEditorBase.CreateModel(version2Output, lang);

            await v2Diff.SetModel(new DiffEditorModel
            {
                Original = originalModel,
                Modified = modifiedModel
            });
        }

        _syncScroll = !baseOutput.StartsWith("Error") && !version1Output.StartsWith("Error") && !version2Output.StartsWith("Error");
    }

    private void ScrollV1(ScrollEvent eventArgs)
    {
        if (_syncScroll)
        {
            v2Diff.ModifiedEditor.SetScrollTop(Convert.ToInt32(eventArgs.ScrollTop));
        }
    }

    private void ScrollV2(ScrollEvent eventArgs)
    {
        if (_syncScroll)
        {
            v1Diff.ModifiedEditor.SetScrollTop(Convert.ToInt32(eventArgs.ScrollTop));
        }
    }
}

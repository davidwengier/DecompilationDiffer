@page "/"
@inject NavigationManager navigationManager
@using System.Threading

<div class="banner">
    <span class="title">Decompilation Differ<span class="version"> - @ThisAssembly.AssemblyInformationalVersion</span></span>
    <span class="about">
        by <a target="_blank" href="https://twitter.com/davidwengier">@@davidwengier</a>
        - <a target="_blank" href="https://github.com/davidwengier/DecompilationDiffer">GitHub</a>
    </span>
</div>

<div class="parent">
    <div class="code-header"><span class="header">Base</span></div>
    <div class="code"><MonacoEditor @ref="codeEditor" Id="code-editor" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="v1-header"><span class="header">Version 1</span></div>
    <div class="v1"><MonacoEditor @ref="v1" Id="v1" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="v2-header"><span class="header">Version 2</span></div>
    <div class="v2"><MonacoEditor @ref="v2" Id="v2" ConstructionOptions="EditorConstructionOptions" OnKeyUp="OnKeyUp" /></div>
    <div class="diff-header">
        <span class="header">Decompilation Diff</span>
        <div class="refresh">
            <span>
                <input type="checkbox" @bind="_autoRefresh" /> Auto
            </span>
            <div class="btn btn-primary" @onclick="Refresh">
                <span>Refresh</span>
            </div>
        </div>
    </div>
    <div class="v1Diff"><MonacoDiffEditor @ref="v1Diff" Id="v1diff" ConstructionOptions="DiffEditorConstructionOptions" /></div>
    <div class="v2Diff"><MonacoDiffEditor @ref="v2Diff" Id="v2diff" ConstructionOptions="DiffEditorConstructionOptions" /></div>
</div>

@code {
    private MonacoEditor codeEditor;
    private MonacoEditor v1;
    private MonacoEditor v2;
    private MonacoDiffEditor v1Diff;
    private MonacoDiffEditor v2Diff;
    private bool _autoRefresh = true;

    private DiffEditorConstructionOptions DiffEditorConstructionOptions(MonacoDiffEditor editor)
    {
        var options = new DiffEditorConstructionOptions
        {
            AutomaticLayout = true,
            Minimap = new MinimapOptions() { Enabled = false },
            Folding = false,
            RenderSideBySide = false,
            IgnoreTrimWhitespace = true,
            OriginalEditable = false,
            ReadOnly = true,
            LineNumbers = ""
        };

        return options;
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Minimap = new MinimapOptions() { Enabled = false },
            Folding = false,
        };

        const string isExternalInit = "\n\n\n\n\n// To allow init accessors to be used:\nnamespace System.Runtime.CompilerServices { public class IsExternalInit{} }";
        if (editor == codeEditor)
        {
            options.Value = "record R(int X);" + isExternalInit;
        }
        else if (editor == v1)
        {
            options.Value = "record R(int X)\n{\n    public int X { get; init; }\n}" + isExternalInit;
        }
        else if (editor == v2)
        {
            options.Value = "record R(int X)\n{\n    public int X { get; set; } = X;\n}" + isExternalInit;

            _ = Update(default);
        }

        return options;
    }

    private CancellationTokenSource _typingCancellationSource = new CancellationTokenSource();

    private void Refresh()
    {
        _ = Update(default);
    }

    private void OnKeyUp(KeyboardEvent keyboardEvent)
    {
        // ignore arrow keys
        if (keyboardEvent.KeyCode == KeyCode.LeftArrow ||
            keyboardEvent.KeyCode == KeyCode.RightArrow ||
            keyboardEvent.KeyCode == KeyCode.UpArrow ||
            keyboardEvent.KeyCode == KeyCode.DownArrow ||
            keyboardEvent.KeyCode == KeyCode.PageUp ||
            keyboardEvent.KeyCode == KeyCode.PageDown)
        {
            return;
        }

        if (!_autoRefresh)
        {
            return;
        }

        _typingCancellationSource.Cancel();
        _typingCancellationSource = new CancellationTokenSource();
        _ = Update(_typingCancellationSource.Token);
    }

    private async Task Update(CancellationToken cancellationToken)
    {
        await Task.Delay(500, cancellationToken);

        if (cancellationToken.IsCancellationRequested)
        {
            return;
        }

        var runner = new Runner(await codeEditor.GetValue(), await v1.GetValue(), await v2.GetValue());

        await runner.Run(navigationManager.BaseUri);

        var baseOutput = runner.BaseOutput;
        var version1Output = runner.Version1Output;
        var version2Output = runner.Version2Output;
        if (runner.ErrorText?.Length != 0)
        {
            baseOutput = version1Output = version2Output = runner.ErrorText;
        }
        
        var originalModel = await MonacoEditorBase.CreateModel(baseOutput, "csharp");
        var modifiedModel = await MonacoEditorBase.CreateModel(version1Output, "csharp");

        await v1Diff.SetModel(new DiffEditorModel
        {
            Original = originalModel,
            Modified = modifiedModel
        });

        modifiedModel = await MonacoEditorBase.CreateModel(version2Output, "csharp");
        await v2Diff.SetModel(new DiffEditorModel
        {
            Original = originalModel,
            Modified = modifiedModel
        });
    }
}
